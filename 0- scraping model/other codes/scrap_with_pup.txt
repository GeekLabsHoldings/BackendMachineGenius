const puppeteer = require('puppeteer')

const getQuotes = async () => {
  // Start a Puppeteer session with:
  // - a visible browser (`headless: false` - easier to debug because you'll see the browser in action)
  // - no default viewport (`defaultViewport: null` - website page will be in full width and height)
  const browser = await puppeteer.launch({
    headless: false,
    defaultViewport: null,
  });

  // Open a new page
  const page = await browser.newPage();

  // On this new page:
  // - open the "http://quotes.toscrape.com/" website
  // - wait until the dom content is loaded (HTML is ready)
  await page.goto("https://www.thestar.com/politics/", {
    waitUntil: "domcontentloaded",
  });
  // "#\\36 196fd704405c6686f9fc7de3a6eae1c > li:nth-child(1) > article > div > div.article-card__details > a > h3 > span"
  // Get page data
  const quotes = await page.evaluate(() => {
  // Fetch the first element with class 
  // Get the displayed text and returns it
  const quoteList = document.querySelectorAll(".tnt-has-block-bg a.tnt-asset-link");

  
  return Array.from(quoteList).map((quote) => {
    // Fetch the sub-elements from the previously fetched element
    // Get the displayed text and return it (`.innerText`)
    const text = quote.innerText;
    let href = quote.getAttribute("href");
    href = `https://www.thestar.com/politics/${href}`
    // const author = quote.querySelector(".tnt-summary").innerHTML;

    return { text , href};
    });
  });

  // Display the quotes
  console.log(quotes);

  // Close the browser
  await browser.close();
};

// Start the scraping
getQuotes();